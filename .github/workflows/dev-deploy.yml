name: Dev Deployment

on:
  push:
    branches:
      - dev

jobs:
  sonar-analysis:
    name: Build and analyze
    runs-on: [self-hosted, dev, connected, api]
    environment: dev
    container:
      image: maven:3.9.8-eclipse-temurin-21
      options: --user 1000:1000
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze with SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=connected-api \
            -Dsonar.projectName='connected-api' \
            -DskipTests

  build-and-deploy:
    name: Deploy to Dev Server
    runs-on: [self-hosted, dev, connected, api]
    environment: dev
    needs: sonar-analysis   # only run if sonar succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Write .env for Compose
        shell: bash
        run: |
          umask 077
          cat > .env << 'EOF'
          SPRING_PROFILES_ACTIVE=${{ secrets.SPRING_PROFILES_ACTIVE }}
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
          CANVAS_URI=${{ secrets.CANVAS_URI }}
          CANVAS_CLIENT_ID=${{ secrets.CANVAS_CLIENT_ID }}
          CANVAS_CLIENT_SECRET=${{ secrets.CANVAS_CLIENT_SECRET }}
          FRONTEND_URI=${{ secrets.FRONTEND_URI }}
          BACKEND_URL=${{ secrets.BACKEND_URL }}
          HIBERNATE_DDL_AUTO=${{ secrets.HIBERNATE_DDL_AUTO }}

          # Mail (dev)
          MAIL_HOST=${{ secrets.MAIL_HOST }}
          MAIL_PORT=${{ secrets.MAIL_PORT }}
          MAIL_PROTOCOL=${{ secrets.MAIL_PROTOCOL }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          EOF

      - name: Stop and remove old container
        run: docker compose -f compose.dev.yml down || true

      - name: Start new containers
        run: docker compose -f compose.dev.yml up -d --build

      - name: Clean up secrets
        if: always()
        run: rm -f .env
